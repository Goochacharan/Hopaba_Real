
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://pswgsxyxhdhhpvugkdqa.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBzd2dzeHl4aGRoaHB2dWdrZHFhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIyMDU5MjUsImV4cCI6MjA1Nzc4MTkyNX0.IiJhneDLCqOqrDRnf6xarWnlGucKJ1qcY8Kh1WbGT6M";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Helper function to get the currently logged in user
 */
export const getCurrentUser = async () => {
  const { data: { user } } = await supabase.auth.getUser();
  return user;
};

/**
 * Helper function to check if a user is authenticated
 */
export const isAuthenticated = async () => {
  const user = await getCurrentUser();
  return !!user;
};

/**
 * Helper function to get the seller name for a listing
 * If the seller_id exists, use it to lookup the user's full name
 * Otherwise, fall back to the stored seller_name
 */
export const getSellerName = async (sellerId?: string, fallbackName?: string) => {
  if (!sellerId) return fallbackName || "Anonymous Seller";
  
  try {
    // We can't access admin functions from the client, so let's use a different approach
    const { data, error } = await supabase
      .from('profiles')
      .select('first_name, last_name')
      .eq('id', sellerId)
      .single();
    
    if (error || !data) return fallbackName || "Anonymous Seller";
    
    if (data.first_name && data.last_name) {
      return `${data.first_name} ${data.last_name}`;
    }
    
    return fallbackName || "Anonymous Seller";
  } catch (err) {
    console.error("Error fetching seller name:", err);
    return fallbackName || "Anonymous Seller";
  }
};
